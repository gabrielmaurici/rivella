@using Rivella.Blazor.Models.Photo
@using Rivella.Blazor.Services.Album.UploadPhoto

@inject IToastService ToastService
@inject IUploadPhotoService UploadPhotoService

<div class="modal-overlay" style="display: @(IsVisible ? "flex" : "none")">
    <div class="modal-content">
        <h3>Detalhes da Foto</h3>
        <div>
            <label for="photoTaker">Foto tirada por:</label>
            <input id="photoTaker" type="text" @bind="UserName" placeholder="Nome do fotógrafo" />
        </div>
        <div>
            <label for="photoCaption">Legenda:</label>
            <input id="photoCaption" type="text" @bind="Description" placeholder="Escreva uma legenda" />
        </div>
        <div class="preview">
            <img src="@PhotoPreview" alt="Pré-visualização da foto" class="photo-preview" />
        </div>
        
        @if (IsLoading)
        {
            <div class="loading">Enviable foto...</div>
        }

        <button class="btn" @onclick="Confirm" disabled="@(IsLoading)">Confirmar Envio</button>
        <button class="btn cancel" @onclick="Cancel" disabled="@(IsLoading)">Cancelar</button>
    </div>
</div>

@code {
    [Parameter] public int AlbumId { get; set; }
    [Parameter] public string? PhotoPreview { get; set; }
    [Parameter] public IBrowserFile? Image { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string? UserName { get; set; }
    private string? Description { get; set; }
    private bool IsLoading { get; set; } = false;

    private async Task Confirm()
    {
        try
        {
            if (Image == null)
                throw new Exception("Imagem não encontrada");

            IsLoading = true;
            
            var upload = new UploadPhotoModel(
                AlbumId,
                UserName,
                Description,
                Image!
            );
            await UploadPhotoService.UploadAsync(upload);
            await OnClose.InvokeAsync(true);
            ToastService.ShowSuccess("Memória enviada com sucesso");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erro ao gravar memória: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void Cancel()
    {
        OnClose.InvokeAsync();
    }
}