@page "/album/{code:guid}"

@using System.Runtime.InteropServices.JavaScript
@using System.Timers
@using Rivella.Blazor.Components.UploadPhotoModal
@using Rivella.Blazor.Services.Album.GetAlbum
@using Rivella.Blazor.Components

@inject IJSRuntime JsRuntime
@inject IGetAlbumService GetAlbumService

@if (!IsLoaded)
{
    <div class="loading">
        <p>Carregando informações do álbum...</p>
    </div>
}
else
{
    <div class="main-container">
        <div>
            <h1 class="site-title">rivella.</h1>
        </div>

        @if (!IsAlbumRevealed)
        {
            <div class="album-container">
                <h1 class="album-title">@AlbumModel!.Name</h1>
                @* <p class="album-description">@AlbumModel.Name</p> *@

                <div class="qrcode-section" style="@(IsAlbumRevealed ? "display: none;" : "")">
                    <img src="@QRCodeUrl" alt="QR Code" class="qrcode"/>
                </div>

                <div class="countdown-section">
                    <p>Fotos enviadas: @AlbumModel.Photos.Count</p>
                    <p>Contagem regressiva revelação</p>
                    <div class="countdown-timer">@Countdown</div>
                </div>

                <div class="photo-section">
                    <label for="cameraInput" class="btn">Enviar foto</label>
                    <InputFile id="cameraInput" accept="image/*" capture="user" OnChange="ProcessPhoto" style="display: none"/>
                </div>

                <UploadPhotoModal
                    AlbumId="AlbumModel!.Id"
                    PhotoPreview="@PhotoPreview"
                    Image="@Image"
                    IsVisible="@IsModalVisible"
                    OnConfirm="HandleConfirm"
                    OnCancel="HandleCancel"
                />
            </div>
        }
        else
        {
            <PhotosList
                AlbumModel="@AlbumModel"
            />
        }
    </div>
}

@code {
    [Parameter]
    public Guid Code { get; set; }

    const int MaxFileSize = 5 * 1024 * 1024;
    private AlbumResponseModel? AlbumModel { get; set; }
    private string QRCodeUrl { get; set; } = "https://via.placeholder.com/150";
    private string? Countdown { get; set; }
    private Timer CountdownTimer { get; set; } = null!;
    private string? PhotoPreview { get; set; }
    private IBrowserFile? Image { get; set; }
    private bool IsModalVisible { get; set; }
    private bool IsLoaded { get; set; }
    private bool IsAlbumRevealed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AlbumModel = await GetAlbumService.GetAsync(Code);
            Console.WriteLine(DateTime.Now);
            Console.WriteLine(AlbumModel.RevelationDate);

            if (DateTime.UtcNow >= AlbumModel.RevelationDate.ToLocalTime())
            {
                IsAlbumRevealed = true;
            }
            else
            {
                CountdownTimer = new Timer(1000);
                CountdownTimer.Elapsed += UpdateCountdown!;
                CountdownTimer.Start();
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Erro ao buscar álbum: {ex.Message}");
        }
        finally
        {
            IsLoaded = true;
        }
    }

    private void UpdateCountdown(object sender, ElapsedEventArgs e)
    {
        var remainingTime = AlbumModel!.RevelationDate - DateTime.UtcNow;
    

        
        if (DateTime.Now >= AlbumModel.RevelationDate)
        {
            
            CountdownTimer.Stop();
            IsAlbumRevealed = true;
        }
        else
        {
            Countdown = $"{remainingTime.Days}d {remainingTime.Hours}h {remainingTime.Minutes}m {remainingTime.Seconds}s";
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task ProcessPhoto(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            Image = file;

            if (Image.Size > MaxFileSize)
            {
                Console.WriteLine($"O arquivo excede o limite de {MaxFileSize / (1024 * 1024)} MB.");
                return;
            }

            var buffer = new byte[Image.Size];
            _ = await Image.OpenReadStream(MaxFileSize).ReadAsync(buffer);

            var imageBase64 = Convert.ToBase64String(buffer);
            PhotoPreview = $"data:image/jpeg;base64,{imageBase64}";

            IsModalVisible = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao processar a foto: {ex.Message}");
        }
    }

    private void HandleConfirm(bool confirmed)
    {
        IsModalVisible = false;
    }

    private void HandleCancel()
    {
        IsModalVisible = false;
    }
}
