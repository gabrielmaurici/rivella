@page "/album/{code:guid}"

@using System.Timers
@using Rivella.Blazor.Components.UploadPhotoModal
@using Rivella.Blazor.Services.Album.GetAlbum
@using Rivella.Blazor.Components
@using Rivella.Blazor.Models.Photo

@inject IToastService ToastService
@inject IGetAlbumService GetAlbumService


@if (!IsLoaded)
{
    <div class="loading">
        <p>Carregando informa√ß√µes do √°lbum...</p>
    </div>
}
else
{
    <div class="main-container">
        <div>
            <h1 class="site-title">rivella.</h1>
        </div>

        @if (!IsAlbumRevealed)
        {
            <div class="album-container">
                <h1 class="album-title">@AlbumModel!.Name</h1>
                <div class="qrcode-section" style="@(IsAlbumRevealed ? "display: none;" : "")">
                    <img src="data:image/png;base64,@AlbumModel.QrCode" alt="QR Code" class="qrcode"/>
                </div>

                <div class="countdown-section">
                    <p>Fotos enviadas: @PhotoCount</p>
                    <p>Esse √°lbum ser√° revelado em:</p>
                    <div class="countdown-timer">@Countdown</div>
                </div>

                <div class="photo-section">
                    <label for="cameraInput" class="btn">Enviar Foto üì∏</label>
                    <InputFile id="cameraInput" accept="image/*" capture="environment" OnChange="ProcessPhoto" style="display: none"/>
                </div>

                <UploadPhotoModal
                    AlbumId="AlbumModel!.Id"
                    PhotoPreview="@PhotoPreview"
                    Image="@Image"
                    IsVisible="@IsModalVisible"
                    OnClose="HandleClose"
                />
            </div>
        }
        else
        {
            <PhotosList
                AlbumModel="@AlbumModel"
            />
        }
    </div>
}

@code {
    [Parameter]
    public Guid Code { get; set; }

    const int MaxFileSize = 5 * 1024 * 1024;
    private AlbumResponseModel? AlbumModel { get; set; }
    private int PhotoCount { get; set; }
    private string? Countdown { get; set; }
    private Timer CountdownTimer { get; set; } = null!;
    private string? PhotoPreview { get; set; }
    private IBrowserFile? Image { get; set; }
    private bool IsModalVisible { get; set; }
    private bool IsLoaded { get; set; }
    private bool IsAlbumRevealed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAlbumAsync();
        PhotoCount = (AlbumModel?.Photos.Count).GetValueOrDefault();
        if (DateTime.Now >= AlbumModel?.RevelationDate)
        {
            IsAlbumRevealed = true;
        }
        else
        {
            CountdownTimer = new Timer(1000);
            CountdownTimer.Elapsed += UpdateCountdown!;
            CountdownTimer.Start();
        }
        IsLoaded = true;
    }

    private async Task GetAlbumAsync()
    {
        try
        {
            AlbumModel = await GetAlbumService.GetAsync(Code);
            ToastService.ShowSuccess("√Ålbum obtido com sucesso");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erro ao buscar √°lbum: {ex.Message}");
        }
    }

    private void UpdateCountdown(object sender, ElapsedEventArgs e)
    {
        var remainingTime = AlbumModel!.RevelationDate - DateTime.Now;
        if (remainingTime.TotalSeconds <= 0)
        {
            CountdownTimer.Stop();
            _ = InvokeAsync(async () =>
            {
                await GetAlbumAsync();
                IsAlbumRevealed = true;
                StateHasChanged();
            });
        }
        else
        {
            Countdown = $"{remainingTime.Days}d {remainingTime.Hours}h {remainingTime.Minutes}m {remainingTime.Seconds}s";
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task ProcessPhoto(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            Image = file;

            if (Image.Size > MaxFileSize)
                throw new Exception($"O arquivo excede o limite de {MaxFileSize / (1024 * 1024)} MB.");

            var buffer = new byte[Image.Size];
            _ = await Image.OpenReadStream(MaxFileSize).ReadAsync(buffer);

            var imageBase64 = Convert.ToBase64String(buffer);
            PhotoPreview = $"data:image/jpeg;base64,{imageBase64}";

            IsModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erro ao processar foto: {ex.Message}");
        }
    }

    private void HandleClose(PhotoSentModel model)
    {
        if (model.OneMorePhotoSent)
            PhotoCount++;
        
        IsModalVisible = false;
    }
}